{
  "Arrow Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      " return ( $0 );",
      "}",
      " ",
      "export default $1;",
    ],
    "description": "Arrow Function Component",
  },

  "Polaris Page": {
    "prefix": "createNewPage",
    "body": [
      "import { BlockStack, InlineStack, Button, Card, Layout, Page, Text } from \"@shopify/polaris\";",
      "import { navigate } from \"raviger\";",
      "",
      "const $1 = () => {",
      "  return (",
      "    <>",
      "      <Page",
      "        title=\"Page Title\"",
      "        backAction={{",
      "          onAction: () => {",
      "            navigate('/');",
      "          },",
      "        }}",
      "      >",
      "        <Layout>",
      "          <Layout.Section>",
      "            <Card>",
      "              <BlockStack gap=\"200\">",
      "                <Text variant=\"headingMd\">Heading</Text>",
      "                <Text>Regular Text Content</Text>",
      "                <InlineStack align=\"end\">",
      "                  <Button",
      "                    variant=\"primary\"",
      "                    onAction={() => {",
      "                      alert('Button pressed');",
      "                    }}",
      "                  >",
      "                    Button",
      "                  </Button>",
      "                </InlineStack>",
      "              </BlockStack>",
      "            </Card>",
      "          </Layout.Section>",
      "        </Layout>",
      "      </Page>",
      "    </>",
      "  );",
      "};",
      "",
      "export default $1;",
    ],
    "description": "Create a new page with navigation and layout components from Polaris.",
  },

  "Create new /route || /app_proxy route": {
    "prefix": "createroute",
    "body": [
      "//Import $1 to `./server/routes/index.js` for it to work",
      "//Press `tab` to cycle through and fill up information",
      "",
      "import { Router } from \"express\";",
      "const $1 = Router();",
      "",
      "$1.get(\"/$2\", async (req, res) => { //get / post / put / delete",
      " try {",
      "  $3",
      "  return res.status(200).send({ message: \"It works!\" });",
      " } catch (e) {",
      "  console.error(`An error occured at /$2`); ",
      "  return res.status(400).send({ error: true });",
      " }",
      "});",
      "",
      "export default $1;",
    ],
    "description": "Create new /route || /app_proxy route",
  },

  "Webhook function": {
    "prefix": "createwebhook",
    "body": [
      "//Press `tab` to cycle through and fill up information",
      "",
      "/**",
      "* Replace TOPIC_NAME with a Webhook Topic to enable autocomplete",
      "* @typedef { import(\"../../_developer/types/2024-07/webhooks.js\").${2:TOPIC_NAME} } webhookTopic",
      "*/",
      "",
      "const $1 = async (topic, shop, webhookRequestBody, webhookId, apiVersion) => {",
      " try {",
      "  /** @type {webhookTopic} */",
      "  const webhookBody = JSON.parse(webhookRequestBody);",
      "  $3",
      " } catch (e) {",
      "  console.error(e);",
      " }",
      "};",
      "",
      "export default $1;",
    ],
    "description": "Webhook function",
  },

  "GraphQL Client Provider": {
    "prefix": "createOnlineClientGql",
    "body": [
      "//Press `tab` to cycle through and fill up information",
      "//Import `clientProvider`",
      "",
      "const $1 = async (req, res) => {",
      " try {",
      "  const { client } = await clientProvider.online.graphqlClient({",
      "   shop: res.locals.user_session.shop",
      "  });",
      "",
      "  const response = await client.request(",
      "   `{$2}`, //Paste your GraphQL query/mutation here",
      "  );",
      "",
      "  res.status(200).send(response);",
      " } catch (e) {",
      "  console.error(e);",
      "  return res.status(400).send({ error: true });",
      " }",
      "};",
      "",
      "export default $1;",
    ],
    "description": "GraphQL Client Provider",
  },
  "Offline GraphQL Client Provider": {
    "prefix": "createOfflineClientGql",
    "body": [
      "//Press `tab` to cycle through and fill up information",
      "//Import `clientProvider`",
      "",
      "const $1 = async (req, res) => {",
      " try {",
      "  const { client } = await clientProvider.offline.graphqlClient({shop: res.locals.user_session.shop}); ",
      "",
      "  const response = await client.request(",
      "   `{$2}`, //Paste your GraphQL query/mutation here",
      "  );",
      "",
      "  return res.status(200).send(response);",
      " } catch (e) {",
      "  console.error(e);",
      "  return res.status(400).send({ error: true });",
      " }",
      "};",
      "",
      "export default $1;",
    ],
    "description": "Offline GraphQL Client Provider",
  },
}
